var dom;
class SimplyDOM {
    constructor() {
        this._animations = {}
    }

    get(n) {
        var element = document.querySelector(n);
        return this._objDOM(element);
    }

    getId(n) {
        var element = document.getElementById(n);
        return this._objDOM(element);
    }

    create(tag) {
        var element = document.createElement(tag);
        return this._objDOM(element);
    }

    getAll(n) {
        var elements = document.querySelectorAll(n);
        var list = [];
        if (elements)
            for (var i = 0; i < elements.length; i++)
            list[i] = this._objDOM(elements[0]);
        else list = undefined;

        return list;
    }
    open(_file){
        window.location.href = _file
        
    }
    add(el){
        var body = document.getElementsByTagName("body")[0];
        body.appendChild(el);
    }
    animate(draw, duration, timing) {

        var start = performance.now();
        if(!timing) timing = function(n){return n};
        window.requestAnimationFrame(function animate(time) {
            // timeFraction va de 0 a 1
            var timeFraction = (time - start) / duration;
            if (timeFraction > 1) timeFraction = 1;

            // calcular el estado actual de la animaci√≥n
            var progress = timing(timeFraction)

            draw(progress); // dibujar

            if (timeFraction < 1) {
                window.requestAnimationFrame(animate);
            }

        });
    }

    _objDOM(n) {
        var this_ = this;
        var result = {
            add: function(el) {
                if (Array.isArray(el))
                    for (var i = 0; i < el.length; i++)
                    n.appendChild(el[i])
                else n.appendChild(el)
            },
            /*animation: function(anim){
                var head = document.getElementsByTagName("head");
                var result = "";
                if(head) head = head[0];
                else {
                    head = document.createElement("head");
                    document.appendChild(head);
                }
                var style = document.createElement("style");
            },*/
            get: function(el) {
                var element = n.querySelector(el);
                return this_._objDOM(elements);
            },
            set: function(el, val){
                return n.setAttribute(el, val);
            },

            style: function(sty) {
                if (typeof sty == "string") {
                    sty = sty.split(";");
                    for (var i = 0; i < sty.length; i++) {
                        sty[i] = sty[i].split(":");
                        var _leftHand = sty[i][0];
                        var _rightHand = sty[i][1];
                        var imax = _leftHand.split("-").length-1;
                        for (var i = 0; i < imax; i++) {
                            _leftHand = _leftHand.replace(/^( *)|( *)$/g, "");
                            var pos = _leftHand.indexOf("-");
                            if (pos> -1) {
                                var char = _leftHand.charAt(pos+1);
                                _leftHand = _leftHand.replace(new RegExp("\-"+char), char.toUpperCase())
                            }
                        }
                        n.style[_leftHand] = _rightHand.replace(/^( *)|( *)$/g, "");
                    }
                } else if (typeof sty == "object") {
                    for (var i in sty)
                        n.style[i] = sty[i]
                } else console.error("style not add");
            },

            getParent: function(sty) {
                return n.parentNode?this_._objDOM(n.parentNode): n.parentElement?this_._objDOM(parentElement): undefined;
            },

            remove: function() {
                n.style.display = "none";
                if (n.parentNode) n.parentNode.removeChild(n);
                if (n.parentElement) n.parentElement.removeChild(n);
                if (n.remove) n.remove();
            },

            on: function(event, action, mode) {
                if (n.addEventListener) n.addEventListener(event, action, mode);
                else if (n.attachEvent) n.attachEvent(event, action);
                else n["on"+event] = action;
            },
            exec: function(ac) {
                return n[ac]?n[ac](): console.error("Event "+ac+" not found")},

            removeOn: function(event, action, mode) {
                if (n.removeEventListener) n.removeEventListener(event, action, mode)
                else if (n.detachEvent) n.detachEvent(event, action);
                else n["on"+event] = function() {};
            }
        };
        n["dom"] = result;
        return n
    }
}
dom = new SimplyDOM();